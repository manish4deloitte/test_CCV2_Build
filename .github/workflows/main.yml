name: CCV2 Build and Deploy

on:
  workflow_dispatch:
    inputs:
      targetEnvironment:
        description: "Target Environment"
        required: true
        type: choice 
        default: d1
        options: 
        - d1
        - s1
      systemUpdate:
        description: 'Platform Update Mode'
        required: true
        default: 'No migration required'
        type: choice
        options:
        - No migration required
        - Migrate data
      deploymentMode:
        description: 'Deployment Mode'
        required: true
        default: 'Rolling Update'
        type: choice
        options:
        - Rolling Update
        - Recreate

env:
  AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}
  SUBSCRIPTION_CODE: ${{ secrets.SUBSCRIPTION_CODE }}
  BUILD_NAME: echo "BUILD_$(echo `date --date='+0 hour 0 minutes' '+%b%d_%H_%M'`)"

  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Print values
      run: |
       echo ${{ inputs.targetEnvironment }}
       echo ${{ inputs.systemUpdate }}
       echo ${{ inputs.deploymentMode }}
       echo ${{ env.BUILD_NAME }}
       
    - name: Microsoft Teams Notification
      uses: jdcargile/ms-teams-notification@v1.4
      with:
          github-token: ${{ github.token }} # this will use the runner's token.
          ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          notification-summary: Github CCV2 Build for ${{ inputs.targetEnvironment }} environment.
          notification-color: 17a2b8
          timezone: America/Denver
          verbose-logging: true
    - name: Backend Build 
      run: |
       BRANCH=${GITHUB_REF##*/}
       echo "BRANCH: ${BRANCH}"
       echo "========================================================================"
       echo "     Starting CCV2 build from $BRANCH, avg completion time: 15 min      "
       echo "========================================================================"
       BUILD_NAME=$(echo R1_`date --date='+0 hour 0 minutes' '+%b%d_%H_%M'`)
       BUILD_CODE=$(curl -s -X POST -H "Authorization: Bearer $AUTH_TOKEN" "https://portalrotapi.hana.ondemand.com/v2/subscriptions/$SUBSCRIPTION_CODE/builds" -H 'Content-Type: application/json' -d '{"branch":"'$BRANCH'","name":"'$BUILD_NAME'"}' | jq ".code" | awk 'NR==1 {print substr($1,2,10)}')
       i=1
       BUILD_STATUS=$(curl -s -X GET -H "Authorization: Bearer $AUTH_TOKEN" "https://portalrotapi.hana.ondemand.com/v2/subscriptions/$SUB_CODE/builds/$BUILD_CODE" | jq ".status" | awk 'NR==1 {print $1}')
       while [ "$BUILD_STATUS" = "null" ] && [ $i -ne 5 ]
       do
           sleep 60
           BUILD_CODE=$(curl -s -X POST -H "Authorization: Bearer $AUTH_TOKEN" "https://portalrotapi.hana.ondemand.com/v2/subscriptions/$SUBSCRIPTION_CODE/builds" -H 'Content-Type: application/json' -d '{"branch":"'$BRANCH'","name":"'$BUILD_NAME'"}' | jq ".code" | awk 'NR==1 {print substr($1,2,10)}')
           i=$((i+1))
       done
       
       echo "BUILD_NAME : ${BUILD_NAME}"
       echo "BUILD_CODE : ${BUILD_CODE}"
       echo $BUILD_CODE > PDeploy
       while [ "$BUILD_STATUS" != '"SUCCESS"' ] && [ "$BUILD_STATUS" != '"FAIL"' ] && [ "$BUILD_STATUS" != "null" ]
       do
           sleep 120
           BUILD_STATUS=$(curl -s -X GET -H "Authorization: Bearer $AUTH_TOKEN" "https://portalrotapi.hana.ondemand.com/v2/subscriptions/$SUBSCRIPTION_CODE/builds/${BUILD_CODE}" | jq ".status" | awk 'NR==1 {print $1}')
           echo "Code is $BUILD_STATUS"
       done
       if [ "$BUILD_STATUS" = "null" ]
       then
           echo "Build is not started due to api call error, please check"
           exit 1
       fi
       echo "\n"
       echo "                    Stage Completed, Printing Logs                        "
       echo "\n"
       curl -s -X GET -H "Authorization: Bearer $AUTH_TOKEN" "https://portalrotapi.hana.ondemand.com/v2/subscriptions/$SUBSCRIPTION_CODE/builds/${BUILD_CODE}/logs" -H "Accept: application/octet-stream" --output ${BUILD_CODE}_log.zip
       unzip ${BUILD_CODE}_log.zip || echo "Log zip file not found, might be becuase of API Team"
       cat releaselog-${BUILD_CODE}.txt || echo "Log file not found, might be becuase of API Team"
       echo "\n"
       echo "              Logs of build stage are successfully printed                "
       if [ "$BUILD_STATUS" = '"FAIL"' ]
       then
           echo "Build Stage Failed"
           exit 1
       else
           echo "======================================================================"
           echo "                  CCV2 Build completed successfully                   "
           echo "======================================================================"
           set -x
       fi
  deployDev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    needs: [build]
    environment:
      name: development
      url: 'http://mylocal.com'
    steps:
    - name: Deploy to Dev
      run: echo This id dev deploy  
    - name: Send email
      uses: cinotify/github-action@main
      with:
        to: 'kmanishkundanbhai@deloitte.com'
        subject: 'Test CCV2 Mail dev deploy section'
        body: '<em>This is a notification from GitHub actions for CCV2 Build.</em>'
        type: 'text/html'
