name: CCV2 Deploy

on:
  workflow_dispatch:
    inputs:
      buildCode:
        description: "Build Code"
        type: string
        required: true
      targetEnvironment:
        description: "Target Environment"
        required: true
        type: choice 
        default: d1
        options: 
        - d1
        - d2
      systemUpdate:
        description: 'Platform Update Mode'
        required: true
        default: 'No migration required'
        type: choice
        options:
        - No migration required 
        - Migrate data
      deploymentMode:
        description: 'Deployment Mode'
        required: true
        default: 'Rolling Update'
        type: choice
        options:
        - Rolling Update
        - Recreate

env:
  AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}
  SUBSCRIPTION_CODE: ${{ secrets.SUBSCRIPTION_CODE }}
  CCV2_DEPLOY_URL: ${{ vars.CCV2_PORTAL }}/${{ secrets.SUBSCRIPTION_CODE }}/deployments
  CCV2_BUILD_URL: ${{ vars.CCV2_PORTAL }}/${{ secrets.SUBSCRIPTION_CODE }}/builds
  BUILD_CODE: ${{ inputs.buildCode }}
  ENVIRONMENT_CODE: ${{ inputs.targetEnvironment }}

  
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Progress Status for Deployment  
      run: |
          payload='{ "buildCode": "${{ env.BUILD_CODE }}", "databaseUpdateMode": "NONE", "environmentCode": "${{ env.ENVIRONMENT_CODE }}", "strategy": "RECREATE" }'
          echo "Payload :: $payload"
          DEPLOYMENT_CODE=493298

          echo "Check Build progress of DEPLOYMENT_CODE : ${DEPLOYMENT_CODE}"
          PROGRESS_CCV2_DEPLOYMENT_URL="${{ env.CCV2_DEPLOY_URL }}"/${DEPLOYMENT_CODE}/progress
          echo "Deployment Progress URL:: $PROGRESS_CCV2_DEPLOYMENT_URL"


          deploymentResponse=$(curl -s -X GET -H "Authorization: Bearer ${{ env.AUTH_TOKEN }}" "${PROGRESS_CCV2_DEPLOYMENT_URL}" -H 'Content-Type: application/json')

          echo "Deployment Status Response :: $deploymentResponse"
          deploymentStatus=$(jq -n "$deploymentResponse" | jq '.deploymentStatus')
          
          echo "Deployment Progress Status: $deploymentStatus"

    - name: Print Build Duration 
      run: |
        
          #!/bin/bash
          deploymentData=$(curl -s -X GET -H "Authorization: Bearer ${{ env.AUTH_TOKEN }}" "${{ env.CCV2_DEPLOY_URL }}/${{ env.DEPLOYMENT_CODE }}" -H 'Content-Type: application/json')
          deployment_end_timestamp=$(echo "$deploymentData" | jq -r '.deployedTimestamp[:-5]')
          deployment_start_timestamp=$(echo "$deploymentData" | jq -r '.scheduledTimestamp[:-5]')
      
          deployment_end_epoch_seconds=$(date --date="$deployment_end_timestamp" +%s)
          deployment_start_epoch_seconds=$(date --date="$deployment_start_timestamp" +%s)
          echo "Deployment end Epoch seconds: $deployment_end_epoch_seconds"
          echo "Deployment start Epoch seconds: $deployment_start_epoch_seconds"
          # Calculate duration in seconds
          duration_seconds=$((build_end_epoch_seconds - build_start_epoch_seconds))
          echo "Duration seconds: $duration_seconds"
          
          # Convert duration to human-readable format (days, hours, minutes, seconds)
          duration_days=$((duration_seconds / 86400))
          duration_hours=$(( (duration_seconds % 86400) / 3600 ))
          duration_minutes=$(( (duration_seconds % 3600) / 60 ))
          duration_seconds=$((duration_seconds % 60))
          # Print results
          echo "Deployment Start Time: $deployment_start_timestamp"
          echo "Deployment End Time: $deployment_end_timestamp"
          printf "Deployment Duration: %d days %d hours %d minutes %d seconds\n" \
              "$duration_days" "$duration_hours" "$duration_minutes" "$duration_seconds"
        
